{"version":3,"sources":["CountdownTimer.js","hooks.js","App.js","serviceWorker.js","index.js"],"names":["CountdownTimer","useState","seconds","setSeconds","optimism","setOptimism","days","Math","floor","SPH","hours","SPM","minutes","secs","backgroundColor","max","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","optimismConstant","additionalSeconds","random","className","style","type","onChange","target","value","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8QAQe,SAASA,IAAkB,IAAD,EACPC,mBAHf,SAEsB,mBAC/BC,EAD+B,KACtBC,EADsB,OAELF,mBAAS,IAFJ,mBAE/BG,EAF+B,KAErBC,EAFqB,KAejCC,EAAOC,KAAKC,MAAMN,EAlBdO,OAmBJC,EAAQH,KAAKC,OAAON,EAnBhBO,MAmB0BH,GApB1BK,MAqBJC,EAAUL,KAAKC,OAAON,EApBlBO,MAoB4BH,EArB5BK,KAqByCD,GAtBzC,IAuBJG,EAAOX,EAvBH,GAyBJY,EAAe,8BAA0BP,KAAKQ,IAAI,EAAmB,KAAfX,EAAW,KAAlD,KAIrB,OC9ByB,SAACY,EAAUC,GACpC,IAAMC,EAAgBC,mBAGtBC,qBAAU,WACRF,EAAcG,QAAUL,IACvB,CAACA,IAGJI,qBAAU,WAIR,GAAc,OAAVH,EAAgB,CAClB,IAAMK,EAAKC,aAJb,WACEL,EAAcG,YAGeJ,GAC7B,OAAO,kBAAMO,cAAcF,OAE5B,CAACL,IDWJQ,EAdsB,WACpB,IAAMC,EAAgB,SAAI,EAAKtB,EAAW,IAAS,GAC7CuB,EAAoBpB,KAAKqB,SAAWF,EAdlCf,KAc2D,EAEnER,EADmBD,EAAU,EAAIyB,KAWR,KAGzB,yBAAKE,UAAU,cAAcC,MAAO,CAAEhB,oBACpC,oDACA,yBAAKe,UAAU,aAAavB,EAA5B,YAA2CI,EAA3C,aAA4DE,EAA5D,eAAiFC,EAAjF,YACA,wCACA,2BAAOkB,KAAK,QAAQC,SAzBD,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACxB5B,EAAY4B,EAAOC,QAwB6BA,MAAO9B,KEvB5C+B,MAVf,WACE,OACE,oCACE,yBAAKN,UAAU,OACb,kBAAC7B,EAAD,SCIYoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.25909b5b.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { useInterval } from './hooks'\n\nconst SPM = 60\nconst SPH = SPM * 60\nconst SPD = SPH * 24\nconst START_TIME = 90 * SPD + 22 * SPH + 30 * SPM + 59\n\nexport default function CountdownTimer() {\n  const [ seconds, setSeconds ] = useState(START_TIME)\n  const [ optimism, setOptimism ] = useState(50)\n\n  const updateOptimism = ({ target }) => {\n    setOptimism(target.value)\n  }\n\n  const updateSeconds = () => {\n    const optimismConstant = (1 - (optimism / 100)) ** 4\n    const additionalSeconds = Math.random() < optimismConstant ? SPH : 0\n    const newSeconds = seconds - 1 + additionalSeconds\n    setSeconds(newSeconds)\n  }\n\n  const days = Math.floor(seconds / SPD)\n  const hours = Math.floor((seconds - days * SPD) / SPH)\n  const minutes = Math.floor((seconds - days * SPD - hours * SPH) / SPM)\n  const secs = seconds % SPM\n\n  const backgroundColor = `rgba(232, 176, 194, ${Math.max(0, (optimism - 50)*0.02)})`\n\n  useInterval(updateSeconds, 1000)\n\n  return (\n    <div className=\"flex-center\" style={{ backgroundColor }}>\n      <h1>Coundown to Normalcy</h1>\n      <div className=\"countdown\">{days} days :: {hours} hours :: {minutes} minutes :: {secs} seconds</div>\n      <h4>Optimism</h4>\n      <input type=\"range\" onChange={updateOptimism} value={optimism} />\n    </div>\n  )\n}","import { useEffect, useRef } from 'react'\n\nexport const useInterval = (callback, delay) => {\n  const savedCallback = useRef()\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback\n  }, [callback])\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current()\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay)\n      return () => clearInterval(id)\n    }\n  }, [delay])\n}\n","import React from 'react';\nimport './App.css';\nimport CountdownTimer from './CountdownTimer';\n\nfunction App() {\n  return (\n    <>\n      <div className=\"App\">\n        <CountdownTimer />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}